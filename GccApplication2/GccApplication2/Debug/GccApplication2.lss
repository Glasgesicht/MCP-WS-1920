
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000613  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000216  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000142b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 3686400
#include "util/delay.h"


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<DDB2)|(1<<DDB1)|(1<<DDB0);
  8a:	84 e2       	ldi	r24, 0x24	; 36
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	24 e2       	ldi	r18, 0x24	; 36
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
  96:	27 60       	ori	r18, 0x07	; 7
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	
	int8_t iLEDcnt =0;
  9c:	19 82       	std	Y+1, r1	; 0x01
	int8_t vz = 1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	8a 83       	std	Y+2, r24	; 0x02
    /* Replace with your application code */
    while (1) 
    {
	PORTB = (1<<iLEDcnt);
  a2:	85 e2       	ldi	r24, 0x25	; 37
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	29 81       	ldd	r18, Y+1	; 0x01
  a8:	42 2f       	mov	r20, r18
  aa:	22 0f       	add	r18, r18
  ac:	55 0b       	sbc	r21, r21
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x38>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x34>
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	//_delay_ms(500);
	iLEDcnt+=vz;
  c0:	99 81       	ldd	r25, Y+1	; 0x01
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	89 0f       	add	r24, r25
  c6:	89 83       	std	Y+1, r24	; 0x01
	
	if(iLEDcnt>2){
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	2c f0       	brlt	.+10     	; 0xd8 <main+0x58>
		iLEDcnt =1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
		vz =-1;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	e5 cf       	rjmp	.-54     	; 0xa2 <main+0x22>
	}else if (iLEDcnt<0){
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 23       	and	r24, r24
  dc:	14 f7       	brge	.-60     	; 0xa2 <main+0x22>
		iLEDcnt=1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	89 83       	std	Y+1, r24	; 0x01
		vz=1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8a 83       	std	Y+2, r24	; 0x02
	}
						

    }
  e6:	dd cf       	rjmp	.-70     	; 0xa2 <main+0x22>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
