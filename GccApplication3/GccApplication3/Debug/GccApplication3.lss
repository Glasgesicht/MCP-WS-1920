
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000684  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000381  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
#define PS2 64


void ADC_Init(void) {
	
	ADMUX = (1<<REFS0); // AVcc Referenzspannung nutzen
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADPS2) | (1<<ADPS0); // Frequenzvorteiler (Faktor 32)
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN); // ADC aktivieren
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
	/* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
	also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
	ADCSRA |= (1<<ADSC); // eine ADC-Wandlung
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {} // auf Abschluss der Konvertierung warten
  9a:	80 81       	ld	r24, Z
  9c:	86 fd       	sbrc	r24, 6
  9e:	fd cf       	rjmp	.-6      	; 0x9a <ADC_Init+0x1a>
		
	/* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
	Wandlung nicht übernommen. */
	ADCW = ADCW;
  a0:	e8 e7       	ldi	r30, 0x78	; 120
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	91 81       	ldd	r25, Z+1	; 0x01
  a8:	91 83       	std	Z+1, r25	; 0x01
  aa:	80 83       	st	Z, r24
  ac:	08 95       	ret

000000ae <ADC_Read>:

/* ADC Einzelmessung */
uint16_t ADC_Read( uint8_t channel )
{
	// Kanal waehlen, ohne andere Bits zu beeinflußen
	ADMUX = (ADMUX & ~(0x0F)) | (channel & 0x0F);
  ae:	ec e7       	ldi	r30, 0x7C	; 124
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // eine Wandlung "single conversion"
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC) ) {} // auf Abschluss der Konvertierung warten
  c6:	80 81       	ld	r24, Z
  c8:	86 fd       	sbrc	r24, 6
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <ADC_Read+0x18>
	return ADCW; // ADC auslesen und zurückgeben
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  d4:	08 95       	ret

000000d6 <main>:


/* Hauptprogramm*/
int main()
{
	DDRB |= ((1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0));// Setze PORTB Bit 0..3 auf Ausgang (LED 1.. LED3)
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	84 b9       	out	0x04, r24	; 4


	uint8_t kanal = 3; // Kanal 3: ADC3 an PortC3 anschließen: MUX3..0: 0011 ? 3
	ADC_Init(); // Initialisiere ADC
  dc:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	while( 1 ) {
		uint16_t curr = ADC_Read(kanal);
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>

		if (curr> 0xCD)
  e6:	8e 3c       	cpi	r24, 0xCE	; 206
  e8:	91 05       	cpc	r25, r1
  ea:	10 f0       	brcs	.+4      	; 0xf0 <main+0x1a>
		{
			PORTB|=(0x02);
  ec:	29 9a       	sbi	0x05, 1	; 5
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x20>
		}else{
			PORTB&=(0x05);
  f0:	25 b1       	in	r18, 0x05	; 5
  f2:	25 70       	andi	r18, 0x05	; 5
  f4:	25 b9       	out	0x05, r18	; 5
		}
		if(curr> 0xFD)
  f6:	8e 3f       	cpi	r24, 0xFE	; 254
  f8:	91 05       	cpc	r25, r1
  fa:	10 f0       	brcs	.+4      	; 0x100 <main+0x2a>
		{
			PORTB|=(0x04);
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	03 c0       	rjmp	.+6      	; 0x106 <main+0x30>
		}else{
		PORTB&=(0x03);
 100:	25 b1       	in	r18, 0x05	; 5
 102:	23 70       	andi	r18, 0x03	; 3
 104:	25 b9       	out	0x05, r18	; 5
		}
		if (curr> 0x8E)
 106:	8f 38       	cpi	r24, 0x8F	; 143
 108:	91 05       	cpc	r25, r1
 10a:	10 f0       	brcs	.+4      	; 0x110 <main+0x3a>
		{
			PORTB|=(0x01);
 10c:	28 9a       	sbi	0x05, 0	; 5
 10e:	e8 cf       	rjmp	.-48     	; 0xe0 <main+0xa>
		}
		else{
			PORTB=(0x0);
 110:	15 b8       	out	0x05, r1	; 5
 112:	e6 cf       	rjmp	.-52     	; 0xe0 <main+0xa>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
