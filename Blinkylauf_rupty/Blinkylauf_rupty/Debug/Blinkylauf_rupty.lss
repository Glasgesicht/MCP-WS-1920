
Blinkylauf_rupty.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000707  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000639  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000299  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e3  00000000  00000000  000016af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_1>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile int8_t iLEDcnt;	// Zaehler bzw Bit, das auf 1 zu setzen ist
volatile int8_t vz;			// Vorzeichen

int main(void)
{
	DDRB |= ((1<<DDB2)|(1<<DDB1)|(1<<DDB0));// PB2 ... PB0 as output
  90:	84 b1       	in	r24, 0x04	; 4
  92:	87 60       	ori	r24, 0x07	; 7
  94:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~ (1 << DDD2);					// Clear PD2 pin, PD2 (INT0 pin) are now inputs
  96:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1 << PD2);					// Turn On the Pull-up on PD2
  98:	5a 9a       	sbi	0x0b, 2	; 11
	EICRA |= (1 << ISC01)|(1 << ISC00);		// set INT0 to trigger on rising Edge
  9a:	e9 e6       	ldi	r30, 0x69	; 105
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 60       	ori	r24, 0x03	; 3
  a2:	80 83       	st	Z, r24
	PORTB &= ~((1<<PB2)|(1<<PB1)|(1<<PB0));	//Loesche PB2..PB0
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	85 b9       	out	0x05, r24	; 5

	iLEDcnt	= 0;		// Zähler mit 0 starten bzw mit Bit 0 beginnen
  aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <iLEDcnt>
	vz = 1;				// es wird zuerst incrementiert
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTB |= (1<<iLEDcnt);					// LED an Pin iLEDcnt an.
  b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <iLEDcnt>
  b8:	25 b1       	in	r18, 0x05	; 5
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x34>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	3a 95       	dec	r19
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x30>
  c8:	82 2b       	or	r24, r18
  ca:	85 b9       	out	0x05, r24	; 5

	EIFR |=	(1<<INTF0);						// Interrupstaufrufe von vorigen Flanken loeschen
  cc:	e0 9a       	sbi	0x1c, 0	; 28
	EIMSK |= (1 << INT0);					// Turns on INT1 and INT0
  ce:	e8 9a       	sbi	0x1d, 0	; 29
	sei();									// turn on interrupts (set global I-bit Flag)
  d0:	78 94       	sei
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x42>

000000d4 <__vector_1>:
	{
	}
}

ISR (INT0_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	iLEDcnt += vz;			// naechste LED
  e4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <iLEDcnt>
  ec:	89 0f       	add	r24, r25
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <iLEDcnt>
	if (iLEDcnt>2)			// Da hier nur drei LEDs: Falls Bit 3,
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <iLEDcnt>
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	3c f0       	brlt	.+14     	; 0x108 <__vector_1+0x34>
	{
		iLEDcnt = 1;		// dann zurueck zu Bit 1
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <iLEDcnt>
		vz = -1;			// und decrementieren (Vorzeichen: -)
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 106:	09 c0       	rjmp	.+18     	; 0x11a <__vector_1+0x46>
	}
	else if (iLEDcnt<0)		// Falls Bit < 0,
 108:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <iLEDcnt>
 10c:	88 23       	and	r24, r24
 10e:	2c f4       	brge	.+10     	; 0x11a <__vector_1+0x46>
	{
		iLEDcnt = 1;		// dann zurueck zu Bit 1
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <iLEDcnt>
		vz = 1;				// und incrementieren (Vorzeichen: +)
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	PORTB =	(1<<iLEDcnt);	// LED an Pin iLEDcnt an
 11a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <iLEDcnt>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_1+0x54>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <__vector_1+0x50>
 12c:	85 b9       	out	0x05, r24	; 5

}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_2>:


ISR (INT1_vect)
{
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
	/* Interrupt Code */
}
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_16>:



ISR(TIMER0_OVF_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
	/* Interrupt Code */
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_18>:

ISR(USART_RX_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
	/* Interrupt Code */
}
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
