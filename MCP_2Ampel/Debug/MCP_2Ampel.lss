
MCP_2Ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d1  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000291  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000366  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000085  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
volatile uint8_t counter = 0;

int main(void)
{
	// Overflow Interrupt erlauben
	TIMSK1 |= (1<<OCIE1A);
  a6:	ef e6       	ldi	r30, 0x6F	; 111
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
		
	// Timer 0 konfigurieren
	TCCR1B = (1<<WGM12); 
  b0:	e1 e8       	ldi	r30, 0x81	; 129
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	80 83       	st	Z, r24
	TCNT1 = -3600;   // for 1 sec at 16 MHz	
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	91 ef       	ldi	r25, 0xF1	; 241
  bc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  c0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TCCR1A = 0x00;
  c4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<CS10)|(1<<CS12);
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	80 83       	st	Z, r24
	
	
	//Richtungsregister PORTC
	DDRC |= (1<<DDC0)|(1<<DDC1)|(1<<DDC2)|(1<<DDC3)|(1<<DDC4);
  cc:	87 b1       	in	r24, 0x07	; 7
  ce:	8f 61       	ori	r24, 0x1F	; 31
  d0:	87 b9       	out	0x07, r24	; 7
	PORTC = a_gruen; //Autofahrer hat Gruen
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	88 b9       	out	0x08, r24	; 8
	
    DDRB &= ~(1 << DDB0); // Clear the PB0, PB1, PB2 pin
  d6:	20 98       	cbi	0x04, 0	; 4
    // PB0,PB1,PB2 (PCINT0, PCINT1, PCINT2 pin) are now inputs

    PORTB |= (1 << PB0); // turn On the Pull-up
  d8:	28 9a       	sbi	0x05, 0	; 5
    // PB0, PB1 and PB2 are now inputs with pull-up enabled
    
    PCICR |= (1 << PCIE0);     // set PCIE0 to enable PCMSK0 scan
  da:	e8 e6       	ldi	r30, 0x68	; 104
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
    PCMSK0 |= (1 << PCINT0);   // set PCINT0 to trigger an interrupt on state change
  e4:	eb e6       	ldi	r30, 0x6B	; 107
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	80 83       	st	Z, r24

	
	// Global Interrupts aktivieren
	sei();
  ee:	78 94       	sei
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x4a>

000000f2 <__vector_11>:
    }
}


ISR (TIMER1_COMPA_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	counter++;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	TCNT1 = -3600;   // for 1 sec at 16 MHz	
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	91 ef       	ldi	r25, 0xF1	; 241
 10e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 112:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	switch(counter){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 11a:	80 31       	cpi	r24, 0x10	; 16
 11c:	99 f0       	breq	.+38     	; 0x144 <__vector_11+0x52>
 11e:	28 f4       	brcc	.+10     	; 0x12a <__vector_11+0x38>
 120:	8e 30       	cpi	r24, 0x0E	; 14
 122:	51 f0       	breq	.+20     	; 0x138 <__vector_11+0x46>
 124:	8f 30       	cpi	r24, 0x0F	; 15
 126:	59 f0       	breq	.+22     	; 0x13e <__vector_11+0x4c>
 128:	1a c0       	rjmp	.+52     	; 0x15e <__vector_11+0x6c>
 12a:	8a 31       	cpi	r24, 0x1A	; 26
 12c:	89 f0       	breq	.+34     	; 0x150 <__vector_11+0x5e>
 12e:	8b 31       	cpi	r24, 0x1B	; 27
 130:	91 f0       	breq	.+36     	; 0x156 <__vector_11+0x64>
 132:	85 31       	cpi	r24, 0x15	; 21
 134:	a1 f4       	brne	.+40     	; 0x15e <__vector_11+0x6c>
 136:	09 c0       	rjmp	.+18     	; 0x14a <__vector_11+0x58>
	case 14: PORTC = a_gelb; break;
 138:	8a e0       	ldi	r24, 0x0A	; 10
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	10 c0       	rjmp	.+32     	; 0x15e <__vector_11+0x6c>
	case 15: PORTC = a_rot; break;
 13e:	89 e0       	ldi	r24, 0x09	; 9
 140:	88 b9       	out	0x08, r24	; 8
 142:	0d c0       	rjmp	.+26     	; 0x15e <__vector_11+0x6c>
	case 16: PORTC = f_gruen; break;
 144:	81 e1       	ldi	r24, 0x11	; 17
 146:	88 b9       	out	0x08, r24	; 8
 148:	0a c0       	rjmp	.+20     	; 0x15e <__vector_11+0x6c>
	case 21: PORTC = f_rot; break;
 14a:	89 e0       	ldi	r24, 0x09	; 9
 14c:	88 b9       	out	0x08, r24	; 8
 14e:	07 c0       	rjmp	.+14     	; 0x15e <__vector_11+0x6c>
	case 26: PORTC = a_gelbrot; break;
 150:	8b e0       	ldi	r24, 0x0B	; 11
 152:	88 b9       	out	0x08, r24	; 8
 154:	04 c0       	rjmp	.+8      	; 0x15e <__vector_11+0x6c>
	case 27: PORTC = a_gruen; counter=0;
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	88 b9       	out	0x08, r24	; 8
 15a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
}
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_3>:

ISR (PCINT0_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24
	if(counter<=14||counter>=26){
 178:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 17c:	8f 30       	cpi	r24, 0x0F	; 15
 17e:	20 f0       	brcs	.+8      	; 0x188 <__vector_3+0x1c>
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 184:	8a 31       	cpi	r24, 0x1A	; 26
 186:	18 f0       	brcs	.+6      	; 0x18e <__vector_3+0x22>
		counter = 13;
 188:	8d e0       	ldi	r24, 0x0D	; 13
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
