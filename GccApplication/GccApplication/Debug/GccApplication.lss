
GccApplication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000789  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  78:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:
#define F_CPU 3686400


void ADC_Init(void)
{
  ADMUX = (1<<REFS0);    
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  
  ADCSRA = (1<<ADPS1) | (1<<ADPS0);     // Frequenzvorteiler
  86:	ea e7       	ldi	r30, 0x7A	; 122
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADEN);                  // ADC aktivieren
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24

  ADCSRA |= (1<<ADSC);                  // eine ADC-Wandlung 
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {         // auf Abschluss der Konvertierung warten
  9a:	80 81       	ld	r24, Z
  9c:	86 fd       	sbrc	r24, 6
  9e:	fd cf       	rjmp	.-6      	; 0x9a <ADC_Init+0x1a>
  }
  /* ADCW muss einmal gelesen werden, sonst wird Ergebnis der nächsten
     Wandlung nicht übernommen. */
  (void) ADCW;
  a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  a8:	08 95       	ret

000000aa <ADC_Read>:

/* ADC Einzelmessung */
uint16_t ADC_Read( uint8_t channel )
{
  // Kanal waehlen, ohne andere Bits zu beeinflußen
  ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	90 7e       	andi	r25, 0xE0	; 224
  b2:	8f 71       	andi	r24, 0x1F	; 31
  b4:	89 2b       	or	r24, r25
  b6:	80 83       	st	Z, r24
  ADCSRA |= (1<<ADSC);            // eine Wandlung "single conversion"
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
  while (ADCSRA & (1<<ADSC) ) {   // auf Abschluss der Konvertierung warten
  c2:	80 81       	ld	r24, Z
  c4:	86 fd       	sbrc	r24, 6
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <ADC_Read+0x18>
  }
  return ADCW;                    // ADC auslesen und zurückgeben
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
  d0:	08 95       	ret

000000d2 <ADC_Read_Avg>:

/* ADC Mehrfachmessung mit Mittelwertbbildung */
/* beachte: Wertebereich der Summenvariablen */
uint16_t ADC_Read_Avg( uint8_t channel, uint8_t nsamples )
{
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	18 2f       	mov	r17, r24
  e2:	d6 2f       	mov	r29, r22
  uint32_t sum = 0;

  for (uint8_t i = 0; i < nsamples; ++i ) {
  e4:	66 23       	and	r22, r22
  e6:	79 f0       	breq	.+30     	; 0x106 <ADC_Read_Avg+0x34>
  e8:	c0 e0       	ldi	r28, 0x00	; 0
  ea:	c1 2c       	mov	r12, r1
  ec:	d1 2c       	mov	r13, r1
  ee:	76 01       	movw	r14, r12
    sum += ADC_Read( channel );
  f0:	81 2f       	mov	r24, r17
  f2:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Read>
  f6:	c8 0e       	add	r12, r24
  f8:	d9 1e       	adc	r13, r25
  fa:	e1 1c       	adc	r14, r1
  fc:	f1 1c       	adc	r15, r1
/* beachte: Wertebereich der Summenvariablen */
uint16_t ADC_Read_Avg( uint8_t channel, uint8_t nsamples )
{
  uint32_t sum = 0;

  for (uint8_t i = 0; i < nsamples; ++i ) {
  fe:	cf 5f       	subi	r28, 0xFF	; 255
 100:	dc 13       	cpse	r29, r28
 102:	f6 cf       	rjmp	.-20     	; 0xf0 <ADC_Read_Avg+0x1e>
 104:	03 c0       	rjmp	.+6      	; 0x10c <ADC_Read_Avg+0x3a>

/* ADC Mehrfachmessung mit Mittelwertbbildung */
/* beachte: Wertebereich der Summenvariablen */
uint16_t ADC_Read_Avg( uint8_t channel, uint8_t nsamples )
{
  uint32_t sum = 0;
 106:	c1 2c       	mov	r12, r1
 108:	d1 2c       	mov	r13, r1
 10a:	76 01       	movw	r14, r12

  for (uint8_t i = 0; i < nsamples; ++i ) {
    sum += ADC_Read( channel );
  }

  return (uint16_t)( sum / nsamples );
 10c:	2d 2f       	mov	r18, r29
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	c7 01       	movw	r24, r14
 116:	b6 01       	movw	r22, r12
 118:	0e 94 a1 00 	call	0x142	; 0x142 <__udivmodsi4>
}
 11c:	c9 01       	movw	r24, r18
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	08 95       	ret

0000012e <main>:

int main( void )
{
  uint16_t adcval;
  adcval =0;
  ADC_Init();
 12e:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>

  while( 1 ) {
    adcval = ADC_Read(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_Read>

    adcval = ADC_Read_Avg(2, 4);  // Kanal 2, Mittelwert aus 4 Messungen
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_Read_Avg>
 140:	f8 cf       	rjmp	.-16     	; 0x132 <main+0x4>

00000142 <__udivmodsi4>:
 142:	a1 e2       	ldi	r26, 0x21	; 33
 144:	1a 2e       	mov	r1, r26
 146:	aa 1b       	sub	r26, r26
 148:	bb 1b       	sub	r27, r27
 14a:	fd 01       	movw	r30, r26
 14c:	0d c0       	rjmp	.+26     	; 0x168 <__udivmodsi4_ep>

0000014e <__udivmodsi4_loop>:
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	ee 1f       	adc	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	a2 17       	cp	r26, r18
 158:	b3 07       	cpc	r27, r19
 15a:	e4 07       	cpc	r30, r20
 15c:	f5 07       	cpc	r31, r21
 15e:	20 f0       	brcs	.+8      	; 0x168 <__udivmodsi4_ep>
 160:	a2 1b       	sub	r26, r18
 162:	b3 0b       	sbc	r27, r19
 164:	e4 0b       	sbc	r30, r20
 166:	f5 0b       	sbc	r31, r21

00000168 <__udivmodsi4_ep>:
 168:	66 1f       	adc	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	88 1f       	adc	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	1a 94       	dec	r1
 172:	69 f7       	brne	.-38     	; 0x14e <__udivmodsi4_loop>
 174:	60 95       	com	r22
 176:	70 95       	com	r23
 178:	80 95       	com	r24
 17a:	90 95       	com	r25
 17c:	9b 01       	movw	r18, r22
 17e:	ac 01       	movw	r20, r24
 180:	bd 01       	movw	r22, r26
 182:	cf 01       	movw	r24, r30
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
